GPG (GnuPG) - GNU Privacy Guard
===============================
About:
GPG is a free implementation of the #OpenPGP standard defined in #RFC4880 (aka PGP). GnuPG allows you to encrypt and sign your data and communications. GPG is a command line tool with optional integration into other applications. There exist many libraries for GPG. GPG also suports #S/MIME and #Secure Shell (ssh).
It was introduced in 1997, under the #GNU General Public License.


OpenPGP
=======
OpenPGP is the most widely used email encryption standard. Defined by the OpenPGP Working Group of the #Internet Engineering Task Force (IETF) as proposed in RFC4880.
OpenPGP was originally derived from the PGP software.

PGP
===
Pretty Good Privacy is an encryption program that provides cryptographic privacy and authentication for data communication. PGP is used for signing and encrypting data.Developed in 1991 by Phil Zimmerman. 

- Design
PGP encrpytion uses a serial combination of hashing, data compression, symmetric-key crpytography, and finally public-key cryptography. Each public key is bound to a username or email address.

- PGP Fingerprint
A public key fingerprint is a shorter version of a public key. From a fingerprint, one could get the correct corresponding key.

- Confidentiality
PGP can be used to send messages confidentially. PGP uses both symmetric and asymmetric encrpytion. The message is encrypted using the symmetric encryption algorithm using a symmetric key generated by the sender. The symmetric key is used only once and is also called a session key. The message and it's session key are sent to the receiever. The session key is encrypted with the receiver's public key. Only the private key belonging to the receiver can decrypt the session key, and use it symmetrically to decrypt the message.

- Digital Signatures
PGP supports message authentication and integrity checking.
Integrity checking is used to detect if the message has been altered since it was completed.
Message Authentication is used to determine if the message was sent by the sender.
Because the content is encrypted, any changes in the message will result in failure in decryption with the appropriate key. The sender uses PGP to create a digital signature for the message using either RSA or DSA algorithms. TO do so, PGP computes a hash (message digest) from plaintext and then creates the digital signature from that hash using the sender's private key. The reciver can decrypt the hash using the sender's public key, and then compare the message with the decrypted hash to authenticate the sender, as only the sender will have the corresponding private key.

....
more to do,
#finish PGP
#RFC4880
#S/MIME
#ssh
#GNU General Public License
#Internet Engineering Task Force
